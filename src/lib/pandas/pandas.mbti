package "smallbearrr/pandas/lib/pandas"

// Values
fn get_type(Series) -> DataType

fn hstack(DataFrame, DataFrame, inplace~ : Bool = ..) -> DataFrame!

fn limit(DataFrame, Int) -> DataFrame!

fn merge(Series, Series, inplace~ : Bool = ..) -> Series!InvalidType

fn op_get(DataFrame, Int) -> DataFrame

fn tail(DataFrame, Int) -> DataFrame!

fn to_series(DataFrame, Int) -> Series

fn unique(DataFrame, Array[String], keep~ : String = ..) -> DataFrame!

fn vstack(DataFrame, DataFrame, inplace~ : Bool = ..) -> DataFrame!

// Types and methods
type ColumnNotFoundError
impl Show for ColumnNotFoundError

pub(all) enum ColumnSelector {
  Int(Int)
  Str(String)
}

type DataFrame
impl DataFrame {
  add_column(Self, Series) -> Unit!
  add_row(Self, Array[SeriesValue]) -> Unit!
  all(Self, ignore_nulls~ : Bool = ..) -> Self!
  any(Self, ignore_nulls~ : Bool = ..) -> Self!
  cast(Self, data_type? : DataType, cast_mapping? : Map[String, DataType], strict~ : Bool = ..) -> Self!
  clear(Self, n~ : Int = ..) -> Self
  clone(Self) -> Self
  column(Self, String) -> Series!ColumnNotFoundError
  count(Self) -> (Int, Int)
  data(Self) -> Array[Series]
  drop_column(Self, String) -> Unit!ColumnNotFoundError
  drop_in_place(Self, String) -> Series!
  drop_nulls(Self, subset? : Array[String]) -> Self!
  drop_row(Self, Int) -> Unit!
  dtypes(Self) -> Array[String]
  fill_null(Self, value? : SeriesValue, strategy? : String, limit? : Int) -> Self!
  filter(Self, String, (SeriesValue) -> Bool) -> Self!
  gather_every(Self, Int, offset~ : Int = ..) -> Self
  get_column_index(Self, String) -> Int!
  has_nulls(Self) -> Self
  head(Self, rows~ : Int = ..) -> Unit
  height(Self) -> Int
  hstack(Self, Self, inplace~ : Bool = ..) -> Self!
  is_empty(Self) -> Bool
  item(Self, Int, ColumnSelector) -> SeriesValue!
  limit(Self, Int) -> Self!
  max(Self) -> Self!
  max_horizontal(Self) -> Series!
  min(Self) -> Self!
  min_horizontal(Self) -> Series!
  new(Array[Series]) -> Self!InconsistentSeriesLength
  null_count(Self) -> Self
  op_get(Self, Int) -> Self
  product(Self) -> Self
  read_csv(String) -> Self!
  rename(Self, String, String) -> Unit!ColumnNotFoundError
  replace_column(Self, Int, Series) -> Unit!
  reverse(Self) -> Unit
  schema(Self) -> Map[String, String]
  select_columns(Self, Array[String]) -> Self!ColumnNotFoundError
  select_rows(Self, range? : (Int, Int), indices? : Array[Int]) -> Self!IndexOutOfBounds
  shape(Self) -> Array[Int]
  slice(Self, Int, length~ : Int = ..) -> Self!
  sort(Self, String, descending~ : Bool = .., nulls_last~ : Bool = ..) -> Unit!ColumnNotFoundError
  sum(Self) -> Self!InvalidType
  sum_horizontal(Self) -> Series!
  tail(Self, Int) -> Self!
  to_dict(Self) -> Map[String, Series]
  to_init_repr(Self) -> String
  to_series(Self, Int) -> Series
  transpose(Self, include_header~ : Bool = .., header_name~ : String = .., column_names? : Array[String]) -> Self!
  unique(Self, Array[String], keep~ : String = ..) -> Self!
  vstack(Self, Self, inplace~ : Bool = ..) -> Self!
  width(Self) -> Int
  with_row_index(Self, offset~ : Int = ..) -> Self
}
impl Eq for DataFrame
impl Hash for DataFrame
impl Show for DataFrame

pub(all) enum DataType {
  Int32
  Float32
  String
  Bool
}
impl Eq for DataType
impl Hash for DataType
impl Show for DataType

type InconsistentSeriesLength
impl Show for InconsistentSeriesLength

type IndexOutOfBounds
impl Show for IndexOutOfBounds

type InvalidType
impl Show for InvalidType

type Series
impl Series {
  abs(Self) -> Self!InvalidType
  acos(Self) -> Self!InvalidType
  all(Self) -> Bool!InvalidType
  any(Self) -> Bool!InvalidType
  append(Self, Self) -> Self!InvalidType
  argsort(Self, descending~ : Bool = ..) -> Array[Int]
  clear(Self, n~ : Int = ..) -> Self
  concat(Array[Self]) -> Self!
  copy(Self) -> Self
  cos(Self) -> Self!InvalidType
  count(Self) -> Int
  data(Self) -> SeriesData
  erase(Self, Int) -> Unit!
  extend(Self, Self) -> Unit!InvalidType
  get_argsort_indices(Self, descending~ : Bool = .., nulls_last~ : Bool = ..) -> Array[Int]
  get_type(Self) -> DataType
  has_null(Self) -> Bool
  is_empty(Self) -> Bool
  is_not_null(Self) -> Self
  is_null(Self) -> Self
  is_sorted(Self, descending~ : Bool = .., nulls_last~ : Bool = ..) -> Bool
  length(Self) -> Int
  log(Self, base~ : Float = ..) -> Self!InvalidType
  log10(Self) -> Self!InvalidType
  lower_bound(Self) -> Self
  max(Self) -> SeriesValue!
  mean(Self) -> Float!
  merge(Self, Self, inplace~ : Bool = ..) -> Self!InvalidType
  min(Self) -> SeriesValue!
  move_nulls_back(Self, inplace~ : Bool = ..) -> Self?
  move_nulls_front(Self, inplace~ : Bool = ..) -> Self?
  n_unique(Self) -> Int
  name(Self) -> String
  new(String, SeriesInput) -> Self
  not_(Self) -> Self
  null_count(Self) -> Int
  op_add(Self, Self) -> Self
  op_div(Self, Self) -> Self
  op_get(Self, Int) -> SeriesValue
  op_mul(Self, Self) -> Self
  op_sub(Self, Self) -> Self
  reverse(Self) -> Unit
  sin(Self) -> Self!InvalidType
  slice(Self, Int, Int) -> Self
  sort(Self) -> Unit
  sum(Self) -> SeriesValue!InvalidType
  swap(Self, Int, Int) -> Unit!IndexOutOfBounds
  tan(Self) -> Self!InvalidType
  unique_counts(Self) -> Self
  upper_bound(Self) -> Self
  var(Self, ddof~ : Int = ..) -> Float!
}
impl Eq for Series
impl Hash for Series
impl Show for Series

type SeriesData
impl SeriesData {
  get_argsort_indices(Self, descending~ : Bool = ..) -> Array[Int]
}
impl Eq for SeriesData
impl Show for SeriesData

pub(all) enum SeriesInput {
  Int32(Array[Int])
  Float32(Array[Float])
  Bool(Array[Bool])
  Str(Array[String])
  Int32_Nullable(Array[Int?])
  Float32_Nullable(Array[Float?])
  Bool_Nullable(Array[Bool?])
  Str_Nullable(Array[String?])
}

pub(all) enum SeriesValue {
  Int(Int)
  Float(Float)
  Bool(Bool)
  Str(String)
  Null
}
impl Compare for SeriesValue
impl Eq for SeriesValue
impl Hash for SeriesValue
impl Show for SeriesValue

// Type aliases

// Traits

